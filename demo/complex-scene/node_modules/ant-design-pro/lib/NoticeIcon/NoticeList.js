'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _skeleton = require('antd/lib/skeleton');

var _skeleton2 = _interopRequireDefault(_skeleton);

var _list = require('antd/lib/list');

var _list2 = _interopRequireDefault(_list);

var _avatar = require('antd/lib/avatar');

var _avatar2 = _interopRequireDefault(_avatar);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var styles = {
  'list': 'antd-pro-notice-icon-list',
  'item': 'antd-pro-notice-icon-item',
  'meta': 'antd-pro-notice-icon-meta',
  'avatar': 'antd-pro-notice-icon-avatar',
  'iconElement': 'antd-pro-notice-icon-iconElement',
  'read': 'antd-pro-notice-icon-read',
  'title': 'antd-pro-notice-icon-title',
  'description': 'antd-pro-notice-icon-description',
  'datetime': 'antd-pro-notice-icon-datetime',
  'extra': 'antd-pro-notice-icon-extra',
  'loadMore': 'antd-pro-notice-icon-loadMore',
  'loadedAll': 'antd-pro-notice-icon-loadedAll',
  'notFound': 'antd-pro-notice-icon-notFound',
  'clear': 'antd-pro-notice-icon-clear'
};


var ListElement = null;

function NoticeList(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === undefined ? [] : _ref$data,
      _onClick = _ref.onClick,
      onClear = _ref.onClear,
      title = _ref.title,
      locale = _ref.locale,
      emptyText = _ref.emptyText,
      emptyImage = _ref.emptyImage,
      loading = _ref.loading,
      onLoadMore = _ref.onLoadMore,
      visible = _ref.visible,
      _ref$loadedAll = _ref.loadedAll,
      loadedAll = _ref$loadedAll === undefined ? true : _ref$loadedAll,
      _ref$scrollToLoad = _ref.scrollToLoad,
      scrollToLoad = _ref$scrollToLoad === undefined ? true : _ref$scrollToLoad,
      _ref$showClear = _ref.showClear,
      showClear = _ref$showClear === undefined ? true : _ref$showClear,
      _ref$skeletonCount = _ref.skeletonCount,
      skeletonCount = _ref$skeletonCount === undefined ? 5 : _ref$skeletonCount,
      _ref$skeletonProps = _ref.skeletonProps,
      skeletonProps = _ref$skeletonProps === undefined ? {} : _ref$skeletonProps;

  if (data.length === 0) {
    return _react2.default.createElement(
      'div',
      { className: styles.notFound },
      emptyImage ? _react2.default.createElement('img', { src: emptyImage, alt: 'not found' }) : null,
      _react2.default.createElement(
        'div',
        null,
        emptyText || locale.emptyText
      )
    );
  }
  var loadingList = Array.from({ length: loading ? skeletonCount : 0 }).map(function () {
    return { loading: loading };
  });
  var LoadMore = loadedAll ? _react2.default.createElement(
    'div',
    { className: (0, _classnames2.default)(styles.loadMore, styles.loadedAll) },
    _react2.default.createElement(
      'span',
      null,
      locale.loadedAll
    )
  ) : _react2.default.createElement(
    'div',
    { className: styles.loadMore, onClick: onLoadMore },
    _react2.default.createElement(
      'span',
      null,
      locale.loadMore
    )
  );
  var onScroll = function onScroll(event) {
    if (!scrollToLoad || loading || loadedAll) return;
    if (typeof onLoadMore !== 'function') return;
    var t = event.currentTarget;

    if (t.scrollHeight - t.scrollTop - t.clientHeight <= 40) {
      onLoadMore(event);
      ListElement = t;
    }
  };
  if (!visible && ListElement) {
    try {
      ListElement.scrollTo(null, 0);
    } catch (err) {
      ListElement = null;
    }
  }
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      _list2.default,
      { className: styles.list, loadMore: LoadMore, onScroll: onScroll },
      [].concat(_toConsumableArray(data), _toConsumableArray(loadingList)).map(function (item, i) {
        var itemCls = (0, _classnames2.default)(styles.item, _defineProperty({}, styles.read, item.read));
        // eslint-disable-next-line no-nested-ternary
        var leftIcon = item.avatar ? typeof item.avatar === 'string' ? _react2.default.createElement(_avatar2.default, { className: styles.avatar, src: item.avatar }) : _react2.default.createElement(
          'span',
          { className: styles.iconElement },
          item.avatar
        ) : null;

        return _react2.default.createElement(
          _list2.default.Item,
          { className: itemCls, key: item.key || i, onClick: function onClick() {
              return _onClick(item);
            } },
          _react2.default.createElement(
            _skeleton2.default,
            _extends({ avatar: true, title: false, active: true }, skeletonProps, { loading: item.loading }),
            _react2.default.createElement(_list2.default.Item.Meta, {
              className: styles.meta,
              avatar: leftIcon,
              title: _react2.default.createElement(
                'div',
                { className: styles.title },
                item.title,
                _react2.default.createElement(
                  'div',
                  { className: styles.extra },
                  item.extra
                )
              ),
              description: _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                  'div',
                  { className: styles.description, title: item.description },
                  item.description
                ),
                _react2.default.createElement(
                  'div',
                  { className: styles.datetime },
                  item.datetime
                )
              )
            })
          )
        );
      })
    ),
    showClear ? _react2.default.createElement(
      'div',
      { className: styles.clear, onClick: onClear },
      locale.clear,
      ' ',
      title
    ) : null
  );
}
exports.default = NoticeList;
module.exports = exports.default;