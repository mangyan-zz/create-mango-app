{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { TweenOneGroup } from 'rc-tween-one';\nimport classnames from 'classnames';\nimport animTypes from './animTypes';\n\nfunction transformArguments(arg, e) {\n  var result = void 0;\n\n  if (typeof arg === 'function') {\n    result = arg(e);\n  } else {\n    result = arg;\n  }\n\n  return result;\n}\n\nvar TextyAnim = function (_React$Component) {\n  _inherits(TextyAnim, _React$Component);\n\n  function TextyAnim() {\n    _classCallCheck(this, TextyAnim);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n\n    _this.getChildrenToRender = function (str) {\n      if (!str) {\n        return [];\n      }\n\n      var split = _this.props.split;\n      var t = split ? split(str) : str.split(''); // Array(str.length).fill(1);\n\n      return t.map(function (c, i) {\n        return React.createElement(\"span\", {\n          key: c + '-' + i.toString()\n        }, c);\n      });\n    };\n\n    _this.getEnterOrLeave = function (e, genre, length) {\n      var _this$props = _this.props,\n          mode = _this$props.mode,\n          type = _this$props.type,\n          enter = _this$props.enter,\n          appear = _this$props.appear,\n          interval = _this$props.interval,\n          duration = _this$props.duration;\n\n      if (!appear && genre === 'enter' || length < 0) {\n        return null;\n      }\n\n      var cb = _extends({}, e, {\n        type: genre\n      });\n\n      var $duration = transformArguments(duration, cb);\n      var $interval = transformArguments(interval, cb);\n      var delay = void 0;\n\n      if (typeof interval === 'function') {\n        // function 下 mode 无效；\n        delay = $interval;\n      } else {\n        switch (mode) {\n          case 'reverse':\n            delay = (length - e.index) * $interval;\n            break;\n\n          case 'sync':\n            delay = 0;\n            break;\n\n          case 'random':\n            delay = length * $interval * Math.random();\n            break;\n\n          default:\n            delay = e.index * $interval;\n        }\n      }\n\n      delay += transformArguments(_this.props.delay, cb);\n      var genreType = genre === 'enter' ? 'from' : 'to';\n      var custom = _this.props[genre] || enter;\n\n      if (custom && typeof custom === 'function') {\n        custom = custom(_extends({}, e, {\n          delay: delay\n        }));\n      } else if (!custom) {\n        custom = animTypes[type];\n      }\n\n      if (custom.enter) {\n        custom = custom[genre] || custom.etner;\n      }\n\n      if (Array.isArray(custom)) {\n        return custom.map(function (item, i) {\n          if (!i && (!item.duration || item.type === 'set')) {\n            return item;\n          } else if (i === 1) {\n            var preItem = custom[0];\n\n            if (!preItem.duration || item.type === 'set') {\n              return _extends({\n                delay: delay\n              }, item);\n            }\n          }\n\n          return _extends({\n            delay: !i ? delay : 0\n          }, item);\n        });\n      }\n\n      return _extends({\n        delay: delay,\n        duration: $duration,\n        type: genreType\n      }, custom);\n    };\n\n    return _this;\n  }\n\n  TextyAnim.prototype.render = function render() {\n    var _classnames,\n        _this2 = this;\n\n    var _a = this.props,\n        prefixCls = _a.prefixCls,\n        type = _a.type,\n        className = _a.className,\n        enter = _a.enter,\n        mode = _a.mode,\n        duration = _a.duration,\n        delay = _a.delay,\n        interval = _a.interval,\n        children = _a.children,\n        split = _a.split,\n        props = __rest(_a, [\"prefixCls\", \"type\", \"className\", \"enter\", \"mode\", \"duration\", \"delay\", \"interval\", \"children\", \"split\"]);\n\n    var getChildrenToRender = this.getChildrenToRender(children);\n    var classNames = classnames(prefixCls, (_classnames = {}, _classnames[type] = type && !enter, _classnames[className] = !!className, _classnames));\n    return React.createElement(TweenOneGroup, _extends({}, props, {\n      className: classNames,\n      enter: function enter(e) {\n        return _this2.getEnterOrLeave(e, 'enter', getChildrenToRender.length - 1);\n      },\n      leave: function leave(e) {\n        return (// 出场时 children 是没有， 需取 group 里的  keysToLeave\n          _this2.getEnterOrLeave(e, 'leave', _this2.tweenGrooup.keysToLeave.length - 1)\n        );\n      },\n      ref: function ref(c) {\n        _this2.tweenGrooup = c;\n      }\n    }), getChildrenToRender);\n  };\n\n  return TextyAnim;\n}(React.Component);\n\nexport default TextyAnim;\nTextyAnim.defaultProps = {\n  type: 'top',\n  mode: 'smooth',\n  prefixCls: 'texty',\n  component: 'div',\n  delay: 0,\n  interval: 50,\n  appear: true\n};","map":null,"metadata":{},"sourceType":"module"}