{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n/**\n * Created by jljsj on 16/1/13.\n */\n\nimport React, { createElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport easingTypes from 'tween-functions';\nimport requestAnimationFrame from 'raf';\nimport EventListener from './EventDispatcher';\nimport { noop, transformArguments, currentScrollTop, windowHeight } from './util';\nvar scrollLinkLists = [];\n\nvar ScrollLink = function (_React$Component) {\n  _inherits(ScrollLink, _React$Component);\n\n  function ScrollLink(props) {\n    _classCallCheck(this, ScrollLink);\n\n    var _this = _possibleConstructorReturn(this, (ScrollLink.__proto__ || Object.getPrototypeOf(ScrollLink)).call(this, props));\n\n    _this.onClick = function (e) {\n      e.preventDefault();\n      EventListener.removeAllType('scroll.scrollAnchorEvent');\n\n      var _this$getElement = _this.getElement(),\n          elementDom = _this$getElement.elementDom,\n          elementRect = _this$getElement.elementRect;\n\n      if (_this.rafID !== -1 || !elementDom) {\n        return;\n      }\n\n      _this.scrollTop = _this.target ? _this.target.scrollTop : currentScrollTop();\n      var targetTop = _this.target ? _this.target.getBoundingClientRect().top : 0;\n      var toTop = Math.round(elementRect.top + _this.scrollTop) - _this.props.offsetTop - targetTop;\n      var t = transformArguments(_this.props.showHeightActive)[0];\n      var toShow = t.match('%') ? _this.clientHeight * parseFloat(t) / 100 : t;\n      _this.toTop = _this.props.toShowHeight ? toTop - toShow + 0.5 : toTop;\n      _this.initTime = Date.now();\n      _this.rafID = requestAnimationFrame(_this.raf);\n      scrollLinkLists.forEach(function (item) {\n        if (item !== _this) {\n          item.remActive();\n        }\n      });\n\n      _this.addActive();\n    };\n\n    _this.getElement = function () {\n      _this.clientHeight = _this.target ? _this.target.clientHeight : windowHeight();\n      var elementDom = document.getElementById(_this.props.to);\n      var elementRect = elementDom && elementDom.getBoundingClientRect();\n      return {\n        elementDom: elementDom,\n        elementRect: elementRect\n      };\n    };\n\n    _this.cancelRequestAnimationFrame = function () {\n      requestAnimationFrame.cancel(_this.rafID);\n      _this.rafID = -1;\n    };\n\n    _this.addActive = function () {\n      if (!_this.state.active) {\n        var obj = {\n          target: _this.dom,\n          to: _this.props.to\n        };\n\n        _this.props.onFocus(obj);\n\n        _this.setState({\n          active: true\n        }, function () {\n          if (_this.props.toHash) {\n            var link = '#' + _this.props.to;\n            history.pushState(null, window.title, link); // eslint-disable-line\n          }\n        });\n      }\n    };\n\n    _this.raf = function () {\n      if (_this.rafID === -1) {\n        return;\n      }\n\n      var duration = _this.props.duration;\n      var now = Date.now();\n      var progressTime = now - _this.initTime > duration ? duration : now - _this.initTime;\n\n      var easeValue = easingTypes[_this.props.ease](progressTime, _this.scrollTop, _this.toTop, duration);\n\n      if (_this.target) {\n        _this.target.scrollTop = easeValue;\n      } else {\n        window.scrollTo(window.scrollX, easeValue);\n      }\n\n      if (progressTime === duration) {\n        _this.cancelRequestAnimationFrame();\n\n        EventListener.reAllType('scroll.scrollAnchorEvent');\n      } else {\n        _this.rafID = requestAnimationFrame(_this.raf);\n      }\n    };\n\n    _this.remActive = function () {\n      if (_this.state.active) {\n        var obj = {\n          target: _this.dom,\n          to: _this.props.to\n        };\n\n        _this.props.onBlur(obj);\n\n        _this.setState({\n          active: false\n        });\n      }\n    };\n\n    _this.scrollEventListener = function () {\n      var _this$getElement2 = _this.getElement(),\n          elementDom = _this$getElement2.elementDom,\n          elementRect = _this$getElement2.elementRect;\n\n      if (!elementDom) {\n        return;\n      }\n\n      var elementClientHeight = elementDom.clientHeight;\n      var targetTop = _this.target ? _this.target.getBoundingClientRect().top : 0;\n      var top = Math.round(-elementRect.top + targetTop);\n      var showHeightActive = transformArguments(_this.props.showHeightActive);\n      var startShowHeight = showHeightActive[0].toString().indexOf('%') >= 0 ? parseFloat(showHeightActive[0]) / 100 * _this.clientHeight : parseFloat(showHeightActive[0]);\n      var endShowHeight = showHeightActive[1].toString().indexOf('%') >= 0 ? parseFloat(showHeightActive[1]) / 100 * _this.clientHeight : parseFloat(showHeightActive[1]);\n\n      if (top >= Math.round(-startShowHeight) && top < Math.round(elementClientHeight - endShowHeight)) {\n        _this.addActive();\n      } else {\n        _this.remActive();\n      }\n    };\n\n    _this.rafID = -1;\n    _this.state = {\n      active: false\n    };\n    return _this;\n  }\n\n  _createClass(ScrollLink, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.dom = ReactDOM.findDOMNode(this);\n      this.target = this.props.targetId && document.getElementById(this.props.targetId);\n      scrollLinkLists.push(this);\n      var date = Date.now();\n      var length = EventListener._listeners.scroll ? EventListener._listeners.scroll.length : 0;\n      this.eventType = 'scroll.scrollAnchorEvent' + date + length;\n      EventListener.addEventListener(this.eventType, this.scrollEventListener, this.target); // 第一次进入；等全部渲染完成后执行;\n\n      setTimeout(function () {\n        _this2.scrollEventListener();\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      scrollLinkLists = scrollLinkLists.filter(function (item) {\n        return item !== _this3;\n      });\n      EventListener.removeEventListener(this.eventType, this.scrollEventListener, this.target);\n      this.cancelRequestAnimationFrame();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var active = this.state.active ? this.props.active : '';\n      var _props = this.props,\n          _onClick = _props.onClick,\n          componentProps = _props.componentProps;\n\n      var props = _extends({}, this.props, {\n        onClick: function onClick(e) {\n          _onClick(e);\n\n          _this4.onClick(e);\n        }\n      });\n\n      ['component', 'duration', 'active', 'showHeightActive', 'ease', 'toShowHeight', 'offsetTop', 'targetId', 'to', 'toHash', 'componentProps'].forEach(function (key) {\n        return delete props[key];\n      });\n      var reg = new RegExp(active, 'ig');\n      var className = props.className || '';\n      props.className = className.indexOf(active) === -1 ? (className + ' ' + active).trim() : className.replace(reg, '').trim();\n      return createElement(this.props.component, _extends({}, props, componentProps));\n    }\n  }]);\n\n  return ScrollLink;\n}(React.Component);\n\nScrollLink.propTypes = {\n  component: PropTypes.any,\n  children: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.any,\n  offsetTop: PropTypes.number,\n  duration: PropTypes.number,\n  active: PropTypes.string,\n  to: PropTypes.string,\n  targetId: PropTypes.string,\n  showHeightActive: PropTypes.any,\n  toShowHeight: PropTypes.bool,\n  ease: PropTypes.string,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  toHash: PropTypes.bool,\n  componentProps: PropTypes.object\n};\nScrollLink.defaultProps = {\n  component: 'div',\n  offsetTop: 0,\n  duration: 450,\n  active: 'active',\n  showHeightActive: '50%',\n  ease: 'easeInOutQuad',\n  toHash: false,\n  onClick: noop,\n  onFocus: noop,\n  onBlur: noop,\n  componentProps: {}\n};\nScrollLink.isScrollLink = true;\nexport default ScrollLink;","map":null,"metadata":{},"sourceType":"module"}